package presentacion;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import dominio.controladores.ControladorDominio;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.List;
import java.util.Locale;

public class VistaItem {
    private ControladorPresentacion ctrlPresentacion;
    private JPanel ItemPanel;
    private JTextField informacionDelItemTextField;
    private JComboBox itemInfoSelector;
    private JTextPane itemInfo;
    private JButton valorationButton;
    private JButton backButton;
    private JScrollPane Text;
    private JFrame frame;

    public VistaItem(ControladorPresentacion ctrlPresentacion) {
        this.ctrlPresentacion = ctrlPresentacion;
        frame = new JFrame("itemForm");
        Text.setViewportView(itemInfo);
        itemInfoSelector.addActionListener(e -> {
            String current = (String) itemInfoSelector.getSelectedItem();
            try {
                itemInfo.setText(ctrlPresentacion.getColumnaActual(current));
            } catch (Exception exc) {
                JOptionPane.showMessageDialog(frame, exc.getMessage());
            }
        });
        backButton.addActionListener(e -> {
            frame.dispose();
            ctrlPresentacion.activarVistaPrincipal();
        });
        valorationButton.addActionListener(e -> {
            try {
                double rating = Double.parseDouble(JOptionPane.showInputDialog(frame, "Indica tu valoracion para este item:"));
                ctrlPresentacion.almacenarRating(rating);
                JOptionPane.showMessageDialog(frame, "Has introducido tu valoracion correctamente");
            } catch (Exception exc) {
                JOptionPane.showMessageDialog(frame, "ERROR: has introducido un valor no numerico");
            }
        });
        loadInfo();
    }

    public void VistaItem() {
        frame.setContentPane(this.ItemPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setSize(600, 400);
    }

    private void loadInfo() {
        List<String> cols = ctrlPresentacion.getItemInfo();
        for (String s : cols) itemInfoSelector.addItem(s);
        String current = (String) itemInfoSelector.getSelectedItem();
        try {
            itemInfo.setText(ctrlPresentacion.getColumnaActual(current));
        } catch (Exception e) {
            itemInfo.setText("");
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        ItemPanel = new JPanel();
        ItemPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        ItemPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        informacionDelItemTextField = new JTextField();
        informacionDelItemTextField.setEditable(false);
        Font informacionDelItemTextFieldFont = this.$$$getFont$$$(null, Font.BOLD, 22, informacionDelItemTextField.getFont());
        if (informacionDelItemTextFieldFont != null)
            informacionDelItemTextField.setFont(informacionDelItemTextFieldFont);
        informacionDelItemTextField.setHorizontalAlignment(0);
        informacionDelItemTextField.setText("Informacion del item");
        panel1.add(informacionDelItemTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        ItemPanel.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        itemInfoSelector = new JComboBox();
        panel2.add(itemInfoSelector, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(341, 30), null, 0, false));
        valorationButton = new JButton();
        valorationButton.setText("Realizar valoracion");
        panel2.add(valorationButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Atras");
        panel2.add(backButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        Text = new JScrollPane();
        panel2.add(Text, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        itemInfo = new JTextPane();
        itemInfo.setEditable(false);
        Text.setViewportView(itemInfo);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return ItemPanel;
    }
}
